{"version":3,"sources":["components/GameCards/index.js","components/Score/index.js","components/Banner/index.js","App.js","serviceWorker.js","index.js"],"names":["GameCards","_ref","children","react_default","a","createElement","className","GameCard","props","src","img","alt","onClick","ScoreBoard","id","score","highscore","Banner","initCardsState","picked","App","state","cards","highScore","shuffleCards","shuffledCardsState","_this","i","length","j","Math","floor","random","temp","setState","console","log","this","newScore","updateCardState","resetGame","cardClicked","_this2","components_Banner","Score","map","card","handleOnClick","bind","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b2615e31.chunk.js","sourcesContent":["import React from \"react\";\n\nexport function GameCards({ children }) {\n    return <div className=\"row\">\n        {children}\n    </div>;\n}\n\nexport function GameCard(props) {\n    return <div className=\"col m4\">\n        <img src={props.img} className=\"imgcards\" alt=\"gamecard\" onClick={props.onClick}/>\n    </div>\n}\n\n\n","import React from \"react\";\n\nexport function ScoreBoard(props) {\n    return <div className=\"scoreboard\">\n        <div id=\"score\"><p>Score: {props.score}</p></div>\n        <div id=\"hscore\"><p>Highscore: {props.highscore}</p></div>\n    </div>\n}\n\n\nexport default ScoreBoard;\n\n\n\n","import React from \"react\";\n\nexport function Banner() {\n    return <div className=\"banner\">\n        <img src=\"./img/smp.png\" alt=\"Super Mario Party\" className=\"banner-img\"/>\n    </div>;\n}\n\n\nexport default Banner;\n\n\n\n","import React, { Component } from 'react';\nimport './App.css';\nimport { GameCards, GameCard } from \"./components/GameCards\";\nimport ScoreBoard from \"./components/Score\";\nimport Banner from \"./components/Banner\";\n\nconst initCardsState = [{ id: 0, img: \"./img/mario.png\", picked: false }, { id: 1, img: \"./img/luigi.png\", picked: false }, { id: 2, img: \"./img/bowser.png\", picked: false }, { id: 3, img: \"./img/daisy.png\", picked: false }, { id: 4, img: \"./img/peach.png\", picked: false }, { id: 5, img: \"./img/rosalina.png\", picked: false }, { id: 6, img: \"./img/waluigi.png\", picked: false }, { id: 7, img: \"./img/wario.png\", picked: false }, { id: 8, img: \"./img/yoshi.png\", picked: false }];\n\nclass App extends Component {\n  state = {\n    cards: initCardsState,\n    score: 0,\n    highScore: 0\n  };\n\n  componentDidMount() {\n    this.shuffleCards();\n  }\n\n  resetGame(){\n    console.log(\"will reset\")\n\n    let highScore = this.state.highscore;\n    if(this.state.score > highScore) highScore = this.state.score;\n\n    this.setState({score: 0});\n    this.setState({highScore: highScore});\n    this.setState({cards: initCardsState});\n    this.shuffleCards();\n  }\n\n  cardClicked(id){\n    console.log(\"entered\");\n    const newScore = this.state.score + 1;\n    const highScore = newScore;\n    const updateCardState = this.state.cards;\n    updateCardState[id].picked = true;\n    this.setState({score: newScore});\n    this.setState({highScore: highScore});\n    // this.state.cards[id].picked = true;\n    this.setState({cards: updateCardState});\n    this.shuffleCards();\n  }\n\n  handleOnClick(id){\n    // () => {this.state.cards[id].picked ?  this.cardClicked(id) : this.resetGame()};\n    console.log(this.state.cards[id].picked);\n    if(!this.state.cards[id].picked){\n      this.cardClicked(id);\n    }else{\n      this.resetGame();\n    }\n  }\n\n  shuffleCards = () => {\n    let shuffledCardsState = this.state.cards;\n    \n    for (var i = this.state.cards.length - 1; i > 0; i--) {\n      var j = Math.floor(Math.random() * (i + 1));\n      var temp = shuffledCardsState[i];\n      \n      shuffledCardsState[i] = shuffledCardsState[j];\n      shuffledCardsState[j] = temp;\n    }\n\n    this.setState({cards: shuffledCardsState});\n    for(const i in this.state.cards){\n      console.log(\"card\"+i+this.state.cards[i].picked)\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"main-container\">\n        <Banner/>\n        <ScoreBoard\n          score={this.state.score}\n          highscore={this.state.highScore}\n        />\n        <div className=\"game-container container valign center\">\n        <GameCards>\n          {this.state.cards.map((card,i) => \n            <GameCard\n                img = {card.img}\n                onClick={this.handleOnClick.bind(this, i)}\n                key = {card.id}\n            />\n          )}\n        </GameCards>\n        <div className=\"row\">\n            <p>Try to select all the cards with out picking the same one twice!</p>\n        </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}